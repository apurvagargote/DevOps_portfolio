name: CI/CD Pipeline

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint || echo "No linting configured"
    
    - name: Run tests
      run: npm test || echo "No tests configured"
    
    - name: Build
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: build/

  docker:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/dev')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: build/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set Docker tag
      id: set-tag
      run: |
        if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          echo "TAG=latest" >> $GITHUB_OUTPUT
          echo "ENV=prod" >> $GITHUB_OUTPUT
        else
          echo "TAG=dev" >> $GITHUB_OUTPUT
          echo "ENV=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/portfolio:${{ steps.set-tag.outputs.TAG }},${{ secrets.DOCKERHUB_USERNAME }}/portfolio:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/portfolio:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/portfolio:buildcache,mode=max

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/dev')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Set environment
      id: set-env
      run: |
        if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          echo "ENV=prod" >> $GITHUB_OUTPUT
        else
          echo "ENV=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
    
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="environment=${{ steps.set-env.outputs.ENV }}"
    
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="environment=${{ steps.set-env.outputs.ENV }}"
    
    - name: Update Kubernetes deployment
      run: |
        aws eks update-kubeconfig --name portfolio-cluster --region us-east-1
        sed -i "s|\${DOCKER_REGISTRY}|${{ secrets.DOCKERHUB_USERNAME }}|g" kubernetes/deployment.yaml
        sed -i "s|\${IMAGE_TAG}|${{ github.sha }}|g" kubernetes/deployment.yaml
        kubectl apply -f kubernetes/deployment.yaml
    
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/portfolio-app